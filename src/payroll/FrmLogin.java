/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package payroll;

import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import java.awt.Color;
import javax.swing.JOptionPane;
import java.util.Calendar;
import java.util.GregorianCalendar;


/**
 *
 * @author Gopinath
 */
public class FrmLogin extends javax.swing.JFrame {

    /**
     * Creates new form login
     */
    public FrmLogin() {
        initComponents();
        this.getContentPane().setBackground(Color.YELLOW);
        setDefaultCloseOperation(this.HIDE_ON_CLOSE);
    
       
        
        new Thread()
        {
            public void run()
        {
            while(true)
        {
            String time="";
            String ampm="";
            Calendar cal=new GregorianCalendar();
            int date=cal.get(Calendar.DATE);
            int month=cal.get(Calendar.MONTH);
            month=month+1;
            int year=cal.get(Calendar.YEAR);
            String Date=date+"/"+month+"/"+year;
            lblDate.setText(Date);
            int hour=cal.get(Calendar.HOUR_OF_DAY);
           
                
            
            int mins=cal.get(Calendar.MINUTE);
            if(mins<10)
                time=hour+":"+"0"+mins;
            else
                time=hour+":"+mins;
            int sec=cal.get(Calendar.SECOND);
            if(sec<10)
                time=time+":"+"0"+sec;
            else
                time=time+":"+sec;
            int am_pm=cal.get(Calendar.AM_PM);
            if(am_pm==1)
            {
            ampm="PM";
            }
            else
        {
            ampm="AM";
        }
            time=time+" "+ampm;
            lblClock.setText(time);
        }
            
        }
        }.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUname = new javax.swing.JLabel();
        lblPwd = new javax.swing.JLabel();
        txtUname = new javax.swing.JTextField();
        lblLogin = new javax.swing.JLabel();
        btnTimein = new javax.swing.JButton();
        txtPwd = new javax.swing.JPasswordField();
        lblClock = new javax.swing.JLabel();
        btnTimeout = new javax.swing.JButton();
        btnLeave = new javax.swing.JButton();
        lblDate = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        btnAlogin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WELCOME");

        lblUname.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblUname.setText("Username:");

        lblPwd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblPwd.setText("Password:");

        txtUname.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        lblLogin.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblLogin.setText("WELCOME TO EMPLOYEE PAYROLL MANAGEMENT");

        btnTimein.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnTimein.setText("TIME IN");
        btnTimein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimeinActionPerformed(evt);
            }
        });

        txtPwd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        lblClock.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblClock.setText("Clock");

        btnTimeout.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnTimeout.setText("TIME OUT");
        btnTimeout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimeoutActionPerformed(evt);
            }
        });

        btnLeave.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnLeave.setText("LEAVE");
        btnLeave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeaveActionPerformed(evt);
            }
        });

        lblDate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblDate.setText("Date");

        btnLogin.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnLogin.setText("Employee Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnAlogin.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnAlogin.setText("Admin Login");
        btnAlogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAloginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(btnLogin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 231, Short.MAX_VALUE)
                        .addComponent(btnAlogin)
                        .addGap(99, 99, 99))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTimein)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLeave)
                        .addGap(49, 49, 49))))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLogin)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblClock, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(193, 193, 193)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblUname)
                    .addComponent(lblPwd))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUname, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimeout))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClock, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUname))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPwd))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTimein)
                    .addComponent(btnTimeout)
                    .addComponent(btnLeave))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogin)
                    .addComponent(btnAlogin))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTimeinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimeinActionPerformed
        // TODO add your handling code here:
        String username="";
        String password="";
        
        Connect1 j=new Connect1();
        DBCollection dbc=j.connect("Passwords");
        

	BasicDBObject searchQuery = new BasicDBObject();
	searchQuery.put("Employee Id",txtUname.getText());
        try {
            DBCursor cursor = dbc.find(searchQuery);
            if(cursor.hasNext()==false)
            {
            JOptionPane.showMessageDialog(null, "Employee id not found", "TIME IN FAILED", JOptionPane.ERROR_MESSAGE);
           return;
            }
              DBObject obj=cursor.next();
            
             password=(String)obj.get("Password");
        username=(String)obj.get("Employee Id"); 
               if(password.equals(txtPwd.getText())&&username.equals(txtUname.getText()))
        {
           
           Connect1 k=new Connect1();
           DBCollection dbc1=k.connect("Attendance");
           Calendar cal=new GregorianCalendar();
           int date=cal.get(Calendar.DATE);
           
           int month=cal.get(Calendar.MONTH);
           int year=cal.get(Calendar.YEAR);
           
           BasicDBObject bdb2=new BasicDBObject();
           bdb2.put("Employee ID",txtUname.getText());
           bdb2.put("Date",date);
           bdb2.put("Month",month);
           DBCursor cur2=dbc1.find(bdb2);
           if(cur2.hasNext())
           {
           JOptionPane.showMessageDialog(null, "You have already timed in today", "TIME IN FAILED", JOptionPane.ERROR_MESSAGE);
           return;
           }
           
           int hour=cal.get(Calendar.HOUR_OF_DAY);
           int mins=cal.get(Calendar.MINUTE);
        //    System.out.println(Calendar.HOUR_OF_DAY);
           BasicDBObject bdb=new BasicDBObject();
           bdb.put("Date",date);
           bdb.put("Month",month);
           bdb.put("Employee ID",txtUname.getText());
           bdb.put("Login Hour",hour);
           bdb.put("Login Minute",mins);
           bdb.put("Logout Hour",-1);
           bdb.put("Logout Minute",-1);
           bdb.put("Normal time",0);
           bdb.put("Overtime time",0);
           
           dbc1.insert(bdb);
           
           txtUname.setText("");
           txtPwd.setText("");
           
        DBCollection dbc2=j.connect("remaining_leaves");
        if(date==1&&month==1)
        {
            BasicDBObject bdb1=new BasicDBObject();
            bdb1.put("Casual_leaves",15);
            bdb1.put("Sick_leaves",20);
            bdb1.put("ID",txtUname.getText());
            dbc2.insert(bdb1);
            
        }
           
        }
        else
        {
           JOptionPane.showMessageDialog(null, "WRONG USERNAME OR PASSWORD", "LOGIN FAILED", JOptionPane.ERROR_MESSAGE);
           txtUname.setText("");
           txtPwd.setText("");
           
        }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "WRONG USERNAME OR PASSWORD", "LOGIN FAILED", JOptionPane.ERROR_MESSAGE);
           txtUname.setText("");
           txtPwd.setText("");
          }
	
      
      JOptionPane.showMessageDialog(null, "WELCOME","LOGIN SUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);
       

        
       
        
        
 
        
    }//GEN-LAST:event_btnTimeinActionPerformed

    private void btnTimeoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimeoutActionPerformed
        // TODO add your handling code here:
        String username="";
        String password="";
        
        
        Connect1 j=new Connect1();
        DBCollection dbc=j.connect("Passwords");
        
         
	BasicDBObject searchQuery = new BasicDBObject();
	searchQuery.put("Employee Id",txtUname.getText());
       
            DBCursor cursor = dbc.find(searchQuery);
             if(cursor.hasNext()==false)
            {
            JOptionPane.showMessageDialog(null, "Employee id not found", "TIME OUT FAILED", JOptionPane.ERROR_MESSAGE);
           return;
            }
              DBObject obj=cursor.next();
            
             password=(String)obj.get("Password");
        username=(String)obj.get("Employee Id");
       
               if(password.equals(txtPwd.getText())&&username.equals(txtUname.getText()))
        {
           
           
           Connect1 k=new Connect1();
           
           DBCollection dbc1=k.connect("Attendance");
            
           Calendar cal=new GregorianCalendar();
           int date=cal.get(Calendar.DATE);
           
           int month=cal.get(Calendar.MONTH);
           int year=cal.get(Calendar.YEAR);
           BasicDBObject bdb3=new BasicDBObject();
           bdb3.put("Employee ID",txtUname.getText());
           bdb3.put("Date",date);
           bdb3.put("Month",month);
           DBCursor cur2=dbc1.find(bdb3);
           if(cur2.hasNext())
           {
               DBObject obj3=cur2.next();
               if((Integer)obj3.get("Logout Hour")!=-1)
               {
               JOptionPane.showMessageDialog(null, "You have already timed out today", "TIME OUT FAILED", JOptionPane.ERROR_MESSAGE);
           
           txtPwd.setText("");
           txtUname.setText("");
           return;
               }
           }
           else
               {
            JOptionPane.showMessageDialog(null, "YOU HAVE NOT TIMED IN YET", "LOGOUT FAILED", JOptionPane.ERROR_MESSAGE);
           txtUname.setText("");
           txtPwd.setText("");
           return;
          }
	
           
           String dat=date+":"+month+":"+year;
          
           
          BasicDBObject search1 = new BasicDBObject();
	search1.put("Date",date);
        search1.put("Month",month);
       search1.put("Employee ID",txtUname.getText());
        DBCursor cur = dbc1.find(search1);
            
              DBObject bdb2=cur.next();
                     
            System.out.println(bdb2);
     
               int hour=cal.get(Calendar.HOUR_OF_DAY);
           int mins=cal.get(Calendar.MINUTE);
           
             BasicDBObject bdb1=new BasicDBObject();
           
          //   System.out.println(bdb2);
           bdb1.put("Date",date);
           bdb1.put("Month",month);
        
             
          
              int login_hour=(int)bdb2.get("Login Hour");
      
           int login_mins=(int)bdb2.get("Login Minute");

          bdb1.put("Employee ID",txtUname.getText());
           bdb1.put("Login Hour",login_hour);
          bdb1.put("Login Minute",login_mins);
            bdb1.put("Logout Hour",hour);
              bdb1.put("Logout Minute",mins); 
           int workhours=0;
           int workmins=0;
           System.out.println(mins-login_mins);
           if(mins-login_mins>=0)
           {
               workhours=hour-login_hour;
               workmins=mins-login_mins;
           }
           else
           {
               workhours=hour-login_hour-1;
               workmins=mins-login_mins+60;
           }
           if(workmins>45)
               workhours++;
           if(workhours<8)
           bdb1.put("Normal time",workhours);
           else
           bdb1.put("Normal time",8);
           if(workhours-8>0)
           bdb1.put("Overtime time",8-workhours);
           else
               bdb1.put("Overtime time",0);
           
             
           
           dbc1.update(bdb2,bdb1);
            JOptionPane.showMessageDialog(null, "THANK YOU","TIMEOUT SUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);
           txtUname.setText("");
           txtPwd.setText("");
           }
           
        
        else
        {
           JOptionPane.showMessageDialog(null, "WRONG USERNAME OR PASSWORD", "LOGOUT FAILED", JOptionPane.ERROR_MESSAGE);
           txtUname.setText("");
           txtPwd.setText("");
         
           
        }
            
         
	
        
        
    }//GEN-LAST:event_btnTimeoutActionPerformed

    private void btnLeaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeaveActionPerformed
        // TODO add your handling code here:
        String username="";
        String password="";
        
        
        Connect1 j=new Connect1();
        DBCollection dbc=j.connect("Passwords");
        
         
	BasicDBObject searchQuery = new BasicDBObject();
	searchQuery.put("Employee Id",txtUname.getText());
        try {
            DBCursor cursor = dbc.find(searchQuery);
             if(cursor.hasNext()==false)
            {
            JOptionPane.showMessageDialog(null, "Employee id not found", "FAILURE", JOptionPane.ERROR_MESSAGE);
           return;
            }
              DBObject obj=cursor.next();
            
             password=(String)obj.get("Password");
        username=(String)obj.get("Employee Id");
       
               if(password.equals(txtPwd.getText())&&username.equals(txtUname.getText()))
        {
           
                
                    FrmLeave t=new FrmLeave();
        FrmLeave.lblEmpid.setText(this.txtUname.getText());
        t.setVisible(true);
        txtPwd.setText("");
        txtUname.setText("");
                
           
        }
        else
        {
           JOptionPane.showMessageDialog(null, "WRONG USERNAME OR PASSWORD", "LOGOUT FAILED", JOptionPane.ERROR_MESSAGE);
           txtUname.setText("");
           txtPwd.setText("");
       
           
        }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "WRONG USERNAME OR PASSWORD", "LOGOUT FAILED", JOptionPane.ERROR_MESSAGE);
           txtUname.setText("");
           txtPwd.setText("");
              
          }
	
        
        
    }//GEN-LAST:event_btnLeaveActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        String username="";
        String password="";
        
        Connect1 j=new Connect1();
        DBCollection dbc=j.connect("Passwords");
        

	BasicDBObject searchQuery = new BasicDBObject();
	searchQuery.put("Employee Id",txtUname.getText());
        try {
            DBCursor cursor = dbc.find(searchQuery);
                   if(cursor.hasNext()==false)
            {
            JOptionPane.showMessageDialog(null, "Employee id not found", "TIME IN FAILED", JOptionPane.ERROR_MESSAGE);
           return;
            }
              DBObject obj=cursor.next();
      
            
             password=(String)obj.get("Password");
        username=(String)obj.get("Employee Id"); 
               if(password.equals(txtPwd.getText())&&username.equals(txtUname.getText()))
        {
                  
        FrmEmplogin emp=new FrmEmplogin();
        FrmEmplogin.lblEmp.setText(this.txtUname.getText());
        txtPwd.setText("");
        txtUname.setText("");
        emp.setVisible(true);
        
           
        }
        else
        {
           JOptionPane.showMessageDialog(null, "WRONG USERNAME OR PASSWORD", "LOGIN FAILED", JOptionPane.ERROR_MESSAGE);
           txtUname.setText("");
           txtPwd.setText("");
           
        }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "WRONG USERNAME OR PASSWORD", "LOGIN FAILED", JOptionPane.ERROR_MESSAGE);
           txtUname.setText("");
           txtPwd.setText("");
          }    
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnAloginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAloginActionPerformed
        // TODO add your handling code here:
        String username="";
        String password="";
        if((txtUname.getText().equals("admin"))==false)
        {
            JOptionPane.showMessageDialog(null, "Only admin can login","FAILURE", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Connect1 j=new Connect1();
        DBCollection dbc=j.connect("Passwords");
        

	BasicDBObject searchQuery = new BasicDBObject();
	searchQuery.put("Employee Id","admin");
        try {
            DBCursor cursor = dbc.find(searchQuery);
               if(cursor.hasNext()==false)
            {
            JOptionPane.showMessageDialog(null, "Employee id not found", "TIME IN FAILED", JOptionPane.ERROR_MESSAGE);
           return;
            }
              DBObject obj=cursor.next();
            
             password=(String)obj.get("Password");
        username=(String)obj.get("Employee Id"); 
               if(password.equals(txtPwd.getText())&&username.equals(txtUname.getText()))
        {
           JOptionPane.showMessageDialog(null, "LOGIN SUCCESSFUL!!","LOGIN SUCCESSFUL", JOptionPane.INFORMATION_MESSAGE);
           new FrmAdmin().setVisible(true);
           this.setVisible(false);
        }
               else
               {
                JOptionPane.showMessageDialog(null, "WRONG USERNAME OR PASSWORD", "LOGIN FAILED", JOptionPane.ERROR_MESSAGE);
           txtUname.setText("");
           txtPwd.setText("");   
               }
        }
          catch (Exception e) {
            JOptionPane.showMessageDialog(null, "WRONG USERNAME OR PASSWORD", "LOGOUT FAILED", JOptionPane.ERROR_MESSAGE);
           txtUname.setText("");
           txtPwd.setText("");
              
          }
              
                   
    }//GEN-LAST:event_btnAloginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmLogin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlogin;
    private javax.swing.JButton btnLeave;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnTimein;
    private javax.swing.JButton btnTimeout;
    private javax.swing.JLabel lblClock;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblLogin;
    private javax.swing.JLabel lblPwd;
    private javax.swing.JLabel lblUname;
    private javax.swing.JPasswordField txtPwd;
    private javax.swing.JTextField txtUname;
    // End of variables declaration//GEN-END:variables
}
